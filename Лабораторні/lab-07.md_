[Перелік усіх робіт](README.md)

# Сортування вставкою

## Мета роботи 


## Обладнання

Персональний комп’ютер, Visual Studio 2008 або інша середа розробки для мови C++

## Теоретичні відомості

### Сортування вставками 

Сортування вставками - досить простий алгоритм. Як в і будь-якому іншому алгоритмі сортування, зі збільшенням розміру сортованого масиву збільшується і час сортування. Основною перевагою алгоритму сортування вставками є можливість сортувати масив у міру його полученія.То є маючи частина масиву, можна починати його сортувати. У паралельному програмування така особливість відіграє не останню роль.

Сортований масив можна розділити на дві частини - відсортована частина і несортованими. На початку сортування перший елемент масиву вважається відсортованим, все інші - не відсортовані. Починаючи з другого елементу масиву і закінчуючи останнім, алгоритм вставляє невідсортоване елемент масиву в потрібну позицію в відсортованої частини масиву. Таким чином, за один крок сортування відсортована частина масиву збільшується на один елемент, а не відсортованого частина масиву зменшується на один елемент. 

## Хід роботи

1. Завантажити Visual Studio 2008. Знайдіть на робочому столі ярлик з Visual Studio 2008 або Пуск → Всі програми→ Microsoft → Microsoft Visual Studio 2008.

2. Створити новий проект «Visual C++ (консольное приложение Win32)». Файл → Cтворити → Проект, тип проекту «Консольное приложение Win32».

3. Перевірити роботу прикладів, пояснити їх роботу
    
    [Приклад 1](../Приклади/lab-02-001.cpp)

4. Змінити приклад настуним чином:
	* Написати програму сортування масива методом вибору. Показати час виконання програми в мілісекундах.
	* Зміти програму таким чином, що замість масивів використати однозв'язний список.


5. Виміри часу для всіх алгоритмів (у тому числі з попередньої лабораторної роботи) зробити на 100, 1000, 10000  елементах. Результати занести в порівняльну таблицю наступного зразка:

||100|5000|20000|
|--|--|--|--|
|Бульбашка||||
|Вибірка||||
|Вставка масив||||
|Вставка список||||

6. Скласти звіт про роботу, у звіт додати код програми та відповісти на контрольні питання

## Контрольні запитання

1. В якому випадку виконується оператор циклу з передумовою **while**?
2. 2. Який вигляд має оператор циклу з параметром **while**?
3. Чим відрізняється оператор циклу **while** від **do-while**?
4. Опишіть алгоритм виконання оператору **do-while**.
5. Який оператор циклу потрібно застосовувати у випадку, коли кількість ітерацій заздалегідь не відома?


## Довідники та додаткові матеріали